// Function   = { "FUNCTION" ~ Identifier ~ OParen ~ (("BYREF" | "BYVAL")? ~ Identifier ~ ":" ~ (Identifier | DataType)) ~ CParen ~ "RETURNS" ~ (Identifier | DataType) ~ Block ~ "ENDFUNCTION" }
DataType   = @{ "INTEGER" | "REAL" | "BOOLEAN" | "CHAR" | "STRING" }
Identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Expressions
Expr         = { LiteralExpr | UnaryExpr | BinaryExpr | LogicalExpr | GroupingExpr }
LiteralExpr  = { LInteger | LReal | LBoolean | LChar | LString }
UnaryExpr    = { ArithmeticOperator ~ (LiteralExpr | Identifier) }
BinaryExpr   = { (LiteralExpr | Identifier) ~ (ArithmeticOperator) ~ (LiteralExpr | Identifier) }
LogicalExpr  = { (LiteralExpr | Identifier) ~ (LogicalOperator) ~ (LiteralExpr | Identifier) }
GroupingExpr = { "(" ~ Expr ~ ")" }

// Operators
ArithmeticOperator = @{ "+" | "-" | "/" | "*" | "DIV" | "MOD" }
LogicalOperator    = @{ "AND" | "OR" }

// Literals
LInteger = @{ ASCII_DIGIT+ }
LReal    = @{ LInteger+ ~ "." ~ LInteger+ }
LBoolean = @{ "TRUE" | "FALSE" }
LChar    = @{ "'" ~ ANY ~ "'" }
LString  = @{
    ("\"" ~ (!("\"" | "\\") ~ ANY | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t"))* ~ "\"")
}

// Silent
WHITESPACE = _{ " " }
